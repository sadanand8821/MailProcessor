import org.jacoco.core.analysis.Analyzer;
import org.jacoco.core.analysis.CoverageBuilder;
import org.jacoco.core.analysis.IClassCoverage;
import org.jacoco.core.analysis.IMethodCoverage;
import org.jacoco.core.data.ExecutionDataReader;
import org.jacoco.core.data.ExecutionDataStore;
import org.jacoco.core.data.SessionInfoStore;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Collection;

public class JacocoExecParser {
    public static void main(String[] args) {
        try {
            File execFile = new File("path/to/your/jacoco.exec");
            File classFilesDirectory = new File("path/to/your/class/files");

            // Read the execution data file
            FileInputStream fis = new FileInputStream(execFile);
            ExecutionDataStore executionDataStore = new ExecutionDataStore();
            SessionInfoStore sessionInfoStore = new SessionInfoStore();
            ExecutionDataReader executionDataReader = new ExecutionDataReader(fis);

            executionDataReader.setExecutionDataVisitor(executionDataStore);
            executionDataReader.setSessionInfoVisitor(sessionInfoStore);
            while (executionDataReader.read()) {}

            fis.close();

            // Analyze the execution data
            CoverageBuilder coverageBuilder = new CoverageBuilder();
            Analyzer analyzer = new Analyzer(executionDataStore, coverageBuilder);

            // Provide the directory containing the class files
            analyzer.analyzeAll(classFilesDirectory);

            // Print method invocation counts
            for (IClassCoverage classCoverage : coverageBuilder.getClasses()) {
                String className = classCoverage.getName().replace('/', '.');

                Collection<IMethodCoverage> methods = classCoverage.getMethods();
                for (IMethodCoverage methodCoverage : methods) {
                    String methodName = methodCoverage.getName();
                    String methodDesc = methodCoverage.getDesc();

                    int invocationCount = methodCoverage.getInstructionCounter().getCoveredCount();

                    System.out.println("Class: " + className);
                    System.out.println("Method: " + methodName + methodDesc);
                    System.out.println("Invocation Count: " + invocationCount);
                    System.out.println("---------------------------");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
