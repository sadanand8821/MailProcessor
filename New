package com.example;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        try {
            String baseDirName = "Code Commit Counts";
            File baseDir = new File(baseDirName);
            if (!baseDir.exists()) {
                if (!baseDir.mkdir()) {
                    System.err.println("Failed to create base directory: " + baseDirName);
                    return;
                }
            }

            System.out.println("DEBUG: Reading repo URLs...");
            List<String> repoUrls = ExcelReader.readRepoURLs("RepoURLs.xlsx");
            System.out.println("DEBUG: Repo URLs: " + repoUrls);

            System.out.println("DEBUG: Reading Dev Map...");
            Map<String, Set<String>> devMap = ExcelReader.readDevMap("DevMap.xlsx");
            System.out.println("DEBUG: Dev Map: " + devMap);

            String branch = "main";
            String afterDate = "2021-01-01";
            String beforeDate = "2021-12-31";

            Map<String, Integer> globalAuthorCounts = new HashMap<>();

            for (String repoUrl : repoUrls) {
                String repoName = extractRepoName(repoUrl);

                System.out.println("DEBUG: About to clone repo: " + repoUrl + " into " + repoName);
                cloneRepository(baseDir, repoUrl, repoName);

                // Check if the directory was created
                File repoFolder = new File(baseDir, repoName);
                if (!repoFolder.exists()) {
                    System.err.println("ERROR: Repo folder not created. Something is wrong with the clone step.");
                    continue;
                } else {
                    System.out.println("DEBUG: Repo folder exists: " + repoFolder.getAbsolutePath());
                }

                // Run shortlog command
                System.out.println("DEBUG: Running shortlog on " + repoName);
                List<String> shortlogOutput = runShortlog(repoFolder, branch, afterDate, beforeDate);

                // Check if we got any output
                if (shortlogOutput.isEmpty()) {
                    System.out.println("DEBUG: Shortlog output is empty. Either no commits or command failed silently.");
                }

                parseShortlogOutput(shortlogOutput, globalAuthorCounts);

                System.out.println("DEBUG: Done processing " + repoUrl + ". Deleting repo folder...");
                deleteDirectory(repoFolder);
            }

            System.out.println("DEBUG: Normalizing authors...");
            Map<String, Integer> finalUidCounts = normalizeAuthors(globalAuthorCounts, devMap);

            File outputFile = new File(baseDir, "CommitCounts.xlsx");
            System.out.println("DEBUG: Writing results to " + outputFile.getAbsolutePath());
            ExcelWriter.writeResults(finalUidCounts, outputFile);

            System.out.println("DEBUG: Process complete. Check CommitCounts.xlsx for results.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String extractRepoName(String repoUrl) {
        String name = repoUrl.substring(repoUrl.lastIndexOf('/') + 1);
        if (name.endsWith(".git")) {
            name = name.substring(0, name.length() - 4);
        }
        return name;
    }

    private static void cloneRepository(File baseDir, String repoUrl, String repoName) throws IOException, InterruptedException {
        List<String> cloneCmd = Arrays.asList("git", "clone", repoUrl, repoName);
        GitCommandExecutor.runGitCommand(baseDir, cloneCmd);
    }

    private static List<String> runShortlog(File repoFolder, String branch, String afterDate, String beforeDate) throws IOException, InterruptedException {
        List<String> shortlogCmd = Arrays.asList(
            "git", "shortlog", "-s", "-n", "-e", branch,
            "--after=" + afterDate,
            "--before=" + beforeDate
        );
        return GitCommandExecutor.runGitCommand(repoFolder, shortlogCmd);
    }

    private static void parseShortlogOutput(List<String> lines, Map<String, Integer> counts) {
        for (String line : lines) {
            String trimmed = line.trim();
            if (trimmed.isEmpty()) continue;
            int spaceIndex = indexOfFirstNonDigit(trimmed);
            if (spaceIndex == -1) continue;
            String countStr = trimmed.substring(0, spaceIndex).trim();
            String author = trimmed.substring(spaceIndex).trim();
            try {
                int commitCount = Integer.parseInt(countStr);
                counts.put(author, counts.getOrDefault(author, 0) + commitCount);
            } catch (NumberFormatException e) {
                System.err.println("DEBUG: Failed to parse commit count: " + countStr + " from line: " + line);
            }
        }
    }

    private static int indexOfFirstNonDigit(String str) {
        for (int i = 0; i < str.length(); i++) {
            if (!Character.isDigit(str.charAt(i))) {
                return i;
            }
        }
        return -1;
    }

    private static Map<String, Integer> normalizeAuthors(Map<String, Integer> authorCounts, Map<String, Set<String>> devMap) {
        Map<String, Integer> finalUidCounts = new HashMap<>();
        for (Map.Entry<String, Set<String>> entry : devMap.entrySet()) {
            String uid = entry.getKey();
            Set<String> aliases = entry.getValue();
            int total = 0;
            for (String alias : aliases) {
                total += authorCounts.getOrDefault(alias, 0);
            }
            finalUidCounts.put(uid, total);
        }
        return finalUidCounts;
    }

    private static void deleteDirectory(File dir) {
        if (!dir.exists()) return;
        if (dir.isDirectory()) {
            File[] files = dir.listFiles();
            if (files != null) {
                for (File f : files) {
                    deleteDirectory(f);
                }
            }
        }
        boolean deleted = dir.delete();
        if (!deleted) {
            System.err.println("DEBUG: Failed to delete " + dir.getAbsolutePath());
        }
    }
}
