// Global maps
Map<String, Integer> globalAuthorCounts = new HashMap<>();

public static void main(String[] args) throws Exception {
    String baseDir = "Code Commit Counts";
    File baseFolder = new File(baseDir);
    if (!baseFolder.exists()) baseFolder.mkdir();

    List<String> repoUrls = ExcelReader.readRepoURLs("RepoURLs.xlsx");
    Map<String, Set<String>> devMap = ExcelReader.readDevMap("DevMap.xlsx");
    
    String branch = "main"; // can read from config
    String afterDate = "2021-01-01";
    String beforeDate = "2021-12-31";

    for (String repoUrl : repoUrls) {
        // Extract repo name from URL as folder name
        String repoName = extractRepoName(repoUrl);
        File repoFolder = new File(baseFolder, repoName);

        // Clone the repo
        List<String> cloneCmd = Arrays.asList("git", "clone", repoUrl, repoName);
        GitCommandExecutor.runGitCommand(baseFolder, cloneCmd);

        // Now run shortlog or log inside repoFolder
        // Example using shortlog:
        List<String> shortlogCmd = Arrays.asList(
            "git", "shortlog", "-s", "-n", "-e", branch,
            "--after=" + afterDate,
            "--before=" + beforeDate
        );
        List<String> shortlogOutput = GitCommandExecutor.runGitCommand(repoFolder, shortlogCmd);

        // Parse shortlog output and update globalAuthorCounts
        parseShortlogOutput(shortlogOutput, globalAuthorCounts);

        // Clean up by deleting the repo folder if desired
        deleteDirectory(repoFolder);
    }

    // Normalize authors using devMap and create final UID map
    Map<String, Integer> finalUidCounts = normalizeAuthors(globalAuthorCounts, devMap);

    // Write output to Excel
    ExcelWriter.writeResults(finalUidCounts, new File(baseDir, "CommitCounts.xlsx"));
}
