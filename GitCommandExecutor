package com.example;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;

public class GitCommandExecutor {

    public static List<String> runGitCommand(File workingDir, List<String> command) throws IOException, InterruptedException {
        System.out.println("DEBUG: Running command: " + String.join(" ", command));
        System.out.println("DEBUG: In directory: " + workingDir.getAbsolutePath());

        ProcessBuilder pb = new ProcessBuilder(command);
        pb.directory(workingDir);
        pb.redirectErrorStream(false);
        Process process = pb.start();

        // Capture both stdout and stderr
        StringBuilder outputBuilder = new StringBuilder();
        StringBuilder errorBuilder = new StringBuilder();

        try (BufferedReader stdout = new BufferedReader(new InputStreamReader(process.getInputStream()));
             BufferedReader stderr = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {

            String line;
            while ((line = stdout.readLine()) != null) {
                outputBuilder.append(line).append(System.lineSeparator());
            }

            // Read errors
            while ((line = stderr.readLine()) != null) {
                errorBuilder.append(line).append(System.lineSeparator());
            }
        }

        int exitCode = process.waitFor();
        List<String> outputLines = List.of(outputBuilder.toString().split(System.lineSeparator()));

        if (exitCode != 0) {
            System.err.println("ERROR: Command failed with exit code " + exitCode);
            System.err.println("ERROR OUTPUT: " + errorBuilder);
        } else {
            System.out.println("DEBUG: Command completed successfully.");
        }

        // Print the standard output and error for debugging
        if (!outputBuilder.toString().isEmpty()) {
            System.out.println("DEBUG: Command STDOUT:\n" + outputBuilder);
        }
        if (!errorBuilder.toString().isEmpty()) {
            System.err.println("DEBUG: Command STDERR:\n" + errorBuilder);
        }

        return outputLines;
    }
}
